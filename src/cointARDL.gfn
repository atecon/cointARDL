<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="cointARDL" needs-time-series-data="true" minver="2020c" lives-in-subdir="true">
<author email="atecon@posteo.de">Artur Tarassow</author>
<version>0.8</version>
<date>2021-04-09</date>
<description>Bootstrap single-eq. cointegration tests</description>
<tags>C12 C20</tags>
<help>
pdfdoc:cointARDL.pdf
</help>
<depends count="2">
ADMBP SB </depends>
<provider>ADMBP</provider>
<gretl-function name="setMod" type="bundle">
 <params count="11">
  <param name="whichTest" type="int" min="0" max="1">
<description>Test type</description>
<labels count="2">
"BDM" "PSS" </labels>
  </param>
  <param name="case" type="int" min="0" max="2" default="1">
<description>Case</description>
<labels count="3">
"Unrestr. intercept" "restr. interc." "restr. interc.+trend" </labels>
  </param>
  <param name="endogenous" type="series" const="true">
<description>Endogenous</description>
  </param>
  <param name="xlist" type="list">
<description>Exogenous regressors</description>
  </param>
  <param name="rxlist" type="list" optional="true">
<description>Restricted exogenous; no lags added</description>
  </param>
  <param name="pq" type="int" min="1" default="4">
<description>Lag length in levels</description>
  </param>
  <param name="condARDL" type="bool" default="1">
<description>Estimate conditional model</description>
  </param>
  <param name="btype" type="int" min="0" max="4" default="1">
<description>Bootstrap type</description>
<labels count="5">
"parametric" "non-parametric" "wild uniform" "wild Rademacher" "block-bootstrap" </labels>
  </param>
  <param name="bootrep" type="int" min="99" default="999"/>
  <param name="failstop" type="scalar" min="0.01" max="0.9" default="0.2">
<description>Fraction of failed bootstrap iterations before full stop</description>
  </param>
  <param name="verb" type="bool" default="1">
<description>Print details</description>
  </param>
 </params>
<code>/* Prepare everything for estimation. */
pkg query ADMBP --quiet
min_version_ADMBP = 1.0
errorif($result.version &lt; min_version_ADMBP, sprintf(&quot;At least version %g of the 'ADMBP' package must be installed.&quot;, min_version_ADMBP))
bundle b
scalar b.error = FALSE
scalar b.addDET = 0
if !exists(rxlist)
  list rxlist = null
endif
# Intercept and trend are ommitted from rxlist and handeled separately later
# by runCoint().
if inlist(rxlist, &quot;const&quot;)
  scalar b.addDET = xmax(1, b.addDET)
  rxlist -= const
endif
if case == 2
  scalar b.addDET = 2
  if !inlist(rxlist, &quot;time&quot;)
    print &quot;Info: Added linear trend to list of restricted series.&quot;
  else
    rxlist -= time
  endif
endif
scalar nobs = $nobs
list L = endogenous xlist rxlist
smpl L --no-missing
errorif($nobs &lt; nobs, &quot;Some of your series has missing values. Abort.&quot;)
matrix b.my = {endogenous}
matrix b.mx = xlist
matrix b.mrx = rxlist
string b.name_endogenous = argname(endogenous)
strings b.names_xlist = varnames(xlist)
strings b.rnames_xlist = varnames(rxlist)
b.nx = nelem(xlist)
b.nrx = nelem(rxlist)
b.pq = pq
b.condARDL = condARDL
b.pqmin = (b.condARDL == TRUE) ? 0 : -1
b.whichTest = whichTest
b.case = case
b.btype = btype
b.bootrep = bootrep
b.failstop = failstop
string b.optsil = (verb==1) ? &quot;&quot; : &quot;--quiet&quot;
return b
</code>
</gretl-function>
<gretl-function name="runCoint" type="void">
 <params count="1">
  <param name="b" type="bundleref"/>
 </params>
<code>/* Run actual cointegration test.
Return: FALSE if not error occurs, otherwise TRUE. */
errorif(b.error == TRUE, &quot;Check setMod() again as some error occurred&quot;)
series endogenous = b.my
list xlist = b.mx
list rxlist = b.mrx
lags endogenous xlist
string quiet = b.optsil
list lDET = null
matrix quantile_values = {0.99, 0.95, 0.9}
strings row_labels = defarray(&quot;99pct.&quot;, &quot;95pct.&quot;, &quot;90pct.&quot;)
matrix b.crit = mshape(NA, nelem(quantile_values), 1)
matrix b.pvboot = mshape(NA, nelem(quantile_values), 1)
matrix b.test = mshape(NA, nelem(quantile_values), 1)
# TODO: In principle we could provide an user-defined matrix before calling runARDL()
# This could be helpful if want to provide a gappy coefficient matrix with some
# zeros or fixed parameters (for whatever reasons).
if b.addDET == 1
  list lDET += const
elif b.addDET == 2
  genr time
  list lDET += const
  lDET += time
endif
matrix b.md = lDET
ols endogenous lDET endogenous(-1 to -b.pq) xlist(b.pqmin to -b.pq) rxlist --quiet
scalar b.init_pos_arcoeff = b.addDET + 1
scalar b.last_pos_arcoeff = b.init_pos_arcoeff + b.pq - 1
scalar isstable = is_stable_model($coeff[b.init_pos_arcoeff:b.last_pos_arcoeff])
if !isstable
  print &quot;Error: Model is dynamically unstable. Abort.&quot;
  flush
  b.error = TRUE
  matrix b.crit = NA
  matrix b.pvboot = NA
  matrix b.test = NA
endif
b.muhat = {$uhat}			# those are used for resampling
scalar b.nx = nelem(xlist)
scalar b.nall = nelem($coeff)
strings b.names_exogenous = varnames($xlist)
# Test the null of no long-run relationship
prepRq(&amp;b)
matrix Rmat = b.Rmat
matrix qvec = b.qvec
catch restrict --full --silent # H0: SUM(a_j)-1=0 --&gt; in ECM: rho=0
  R = Rmat
  q = qvec
end restrict
scalar err = $error
if err
  printf &quot;%s. Abort.\n&quot;, errmsg(err)
  b.error = TRUE
endif
if !b.error
  b.teststat = $test				# F-Test stats.
  # Information of the null model for bootstrap
  b.rARcoef = $coeff[b.init_pos_arcoeff:b.last_pos_arcoeff]
  scalar b.ax = b.last_pos_arcoeff + 1
  if b.addDET &gt; 0
    # Deterministics + DL coeff needed for ysim()
    b.Zcoef = $coeff[1:(b.init_pos_arcoeff-1)] | $coeff[b.ax:]
  else
    b.Zcoef = $coeff[b.ax:]
  endif
  scalar b.ex = b.ax + b.nx * (b.condARDL + b.pq) - 1
  bootTest(&amp;b)
  if !b.error
    matstat = b.matstat
    b.crit =  quantile(b.matstat, quantile_values)
    rnameset(b.crit, row_labels)
    # Compute scalar bootstrap p-value
    b.pvboot = sum( abs(b.matstat) .&gt;= abs(b.teststat) ) / b.bootrep
    if !nelem(b.optsil)
      printTest(&amp;b)
    endif
  endif
endif
</code>
</gretl-function>
<gretl-function name="Rq_BDM" type="bundle" private="1">
 <params count="1">
  <param name="b" type="bundle" const="true"/>
 </params>
<code>/* Set of restriction matrices for BDM based cointegration test. */
bundle Set
matrix Set.Rmat = zeros((1 + b.case), b.nall)
pos_const = instrings(b.names_exogenous, &quot;const&quot;)
pos_time = instrings(b.names_exogenous, &quot;time&quot;)
if b.case == 0
  matrix Set.qvec = {1}
elif b.case == 1
  Set.Rmat[pos_const, pos_const] = 1
  matrix Set.qvec = zeros(1, 1) | {1}
elif b.case == 2
  Set.Rmat[pos_const, pos_const] = 1
  Set.Rmat[pos_time, pos_time] = 1
  matrix Set.qvec = zeros(2, 1) | {1}
endif
# restrict AR coefficients
Set.Rmat[(1 + b.case), b.init_pos_arcoeff:b.last_pos_arcoeff] = 1
return Set
</code>
</gretl-function>
<gretl-function name="Rq_PSS" type="bundle" private="1">
 <params count="1">
  <param name="b" type="bundle" const="true"/>
 </params>
<code>/* Set of restriction matrices for PSS based cointegration test. */
bundle Set
matrix Set.Rmat = zeros((1 + b.case), b.nall)
pos_const = instrings(b.names_exogenous, &quot;const&quot;)
pos_time = instrings(b.names_exogenous, &quot;time&quot;)
if b.case == 0
  matrix Set.Rmat = zeros((1 + b.nx), b.nall) # unrestr. const.
  matrix Set.qvec = {1} | zeros(b.nx, 1)
elif b.case == 1
  matrix Set.Rmat = zeros((2 + b.nx), b.nall) # restr. const
  Set.Rmat[pos_const, pos_const] = 1
  matrix Set.qvec = zeros(1, 1) | {1} | zeros(b.nx, 1)
elif b.case == 2
  matrix Set.Rmat = zeros((3 + b.nx), b.nall) # restr. const + time
  Set.Rmat[pos_const, pos_const] = 1
  Set.Rmat[pos_time, pos_time] = 1
  matrix Set.qvec = zeros(2, 1) | {1} | zeros(b.nx, 1)
endif
# restrict AR coefficients
Set.Rmat[(1 + b.case), b.init_pos_arcoeff:b.last_pos_arcoeff] = 1
scalar ax = b.last_pos_arcoeff + 1
scalar ex = ax + (b.condARDL + b.pq) - 1
loop i=(2 + b.case)..(1 + b.case + b.nx) -q
  Set.Rmat[i,ax:ex] = 1        # Sum coefficients up
  ax = ex + 1
  ex = ax + (b.condARDL + b.pq) - 1
endloop
return Set
</code>
</gretl-function>
<gretl-function name="prepRq" type="void" private="1">
 <params count="1">
  <param name="b" type="bundleref"/>
 </params>
<code>/* Wrapper for compiling test-specific matrices for linear restrictions. */
if b.whichTest == 0
  b = b + Rq_BDM(b)
elif b.whichTest == 1
  b = b + Rq_PSS(b)
else
  funcerr &quot;Unknown ID for cointegration test passed. Abort.&quot;
endif
</code>
</gretl-function>
<gretl-function name="printTest" type="void" private="1">
 <params count="1">
  <param name="b" type="bundleref"/>
 </params>
<code>/* */
printf &quot;\n*****************************************************\n&quot;
if b.whichTest==0
  printf &quot;*** BDM bootstrap t-Test based on ARDL(%d,%d) model ***\n&quot;, b.pq, b.pq
else
  printf &quot;*** PSS bootstrap F-Test based on ARDL(%d,%d) model ***\n&quot;, b.pq, b.pq
endif
printf &quot;*****************************************************\n&quot;
printf &quot;Restriction case:\n&quot;
if b.case == 0
  printf &quot;Unrestricted constant\n&quot;
elif b.case == 1
  printf &quot;Restricted constant\n&quot;
elif b.case == 2
  printf &quot;Restricted constant and restricted trend\n&quot;
endif
printf &quot;Bootstrap type: &quot;
if b.btype == 0
  string btype = &quot;parametric&quot;
elif b.btype == 1
  string btype = &quot;non-parametric&quot;
elif b.btype == 2
  string btype = &quot;wild (uniform)&quot;
elif b.btype == 3
  string btype = &quot;wild (Rademacher)&quot;
elif b.btype == 4
  string btype = &quot;block-bootstrap&quot;
endif
printf &quot;Bootstrap replications: %d\n&quot;, b.bootrep
printf &quot;\nInitial test statistics = %.3f\n&quot;, b.teststat
printf &quot;\nCritical values:\n       1pct.  \t 5pct.  \t 10pct.\n&quot;
printf &quot;%12.3f\n&quot;, b.crit'
printf &quot;Bootstrap p-value = %.3f\n&quot;, b.pvboot
printf &quot;Percentage of failed iterations = %.2f\n&quot;, (100 * b.failed / b.bootrep)
printf &quot;******************************************************\n&quot;
</code>
</gretl-function>
<gretl-function name="bootTest" type="void" private="1">
 <params count="1">
  <param name="b" type="bundleref"/>
 </params>
<code>/* Bootstrap-bases cointegration test. */
matrix Rmat = b.Rmat
matrix qvec = b.qvec
series endogenous = b.my
list xlist = b.mx
list rxlist = b.mrx
list lDET = b.md
string quiet_str = b.optsil
lags endogenous xlist
list Z = lDET xlist(b.pqmin to -b.pq) rxlist
matrix Xbeta = b.Zcoef
matrix matstat = mshape(NA, b.bootrep, 1)
scalar nloop=1
scalar failed = 0
scalar failstop = 0.35
scalar b.error = FALSE
scalar b.failed = 0
scalar btype = b.btype
loop while nloop &lt;= b.bootrep
  series e = drawE(b)
  # Simulate the null model (no long-run relationship)
  series y_b = varsimA(endogenous, b.rARcoef, Z, Xbeta, e, b.pq)
  lags y_b 1
  # Estimate the alt model based on the the null model DGP
  catch ols y_b lDET y_b(-1 to -b.pq) xlist(b.pqmin to -b.pq) rxlist --quiet
  scalar err = $error
  if err || nelem($xlist) != cols(Rmat) || !is_stable_model($coeff[b.init_pos_arcoeff:b.last_pos_arcoeff])
    b.failed++
  endif
  if (b.failed / b.bootrep &gt;= b.failstop)
    printf &quot;\nError: Simulated too many unstable models. Abort.\n&quot;
    flush
    b.error = TRUE
    break
  endif
  if !err
    # Run the restriction of the estimated alt model based on null model dgp
    restrict --silent	 # H0: SUM(a_j)-1=0 --&gt; in ECM: rho=0
      R = Rmat
      q = qvec
    end restrict
    matstat[nloop] = $test
    nloop++
  endif
endloop
if b.error == FALSE
  b.matstat = matstat
endif
# Clean up the bundle
delete b.ex
delete b.nrx
delete b.mx
delete b.nx
delete b.Rmat
delete b.Zcoef
delete b.qvec
delete b.init_pos_arcoeff
delete b.nall
delete b.ax
delete b.md
delete b.rARcoef
delete b.last_pos_arcoeff
delete b.muhat
delete b.mrx
</code>
</gretl-function>
<sample-script>
set verbose off
clear

include cointARDL.gfn

# Select example
RUN_EXAMPLE = 1

if RUN_EXAMPLE == 1
   open denmark.gdt -q

   # Run the bootstrap version based on the ARDL
   list xlist = LRY IBO IDE
   list rxlist = const time
   scalar pq = 2
   scalar condARDL = FALSE	# FALSE=unconditional, TRUE=conditional ARDL
   # 0=unrestr. const., 1=restrc. const., 2=restr. const + restr. trend
   scalar case = 2
   # 0=parametric, 1=non-param, 2=wild, 3=wild+Rademacher distrib., 4=block-boot
   scalar btype = 3
   scalar bootrep = 999
   scalar failstop = 0.2
   scalar which = 1			  # 0=BDM, 1=PSS test
   scalar verbose = TRUE

   bundle b = setMod(which, case, LRM, xlist, rxlist, pq, condARDL,\
                     btype, bootrep, failstop, verbose)
   printf &quot;\nError status = %d\n&quot;, b.error

   runCoint(&amp;b)               # Run bootstrap cointegration test
   printf &quot;\nError status = %d\n&quot;, b.error

   scalar cv5 = b.crit[2]     # Grab relevant information from bundle b
   matrix bstats = b.matstat  # 5 pct . bootstrap critical value


elif RUN_EXAMPLE == 2   # Example 2 -- Simulation example

   nulldata 200 --preserve
   setobs 1 1 --special-time-series
   scalar T = max(index)
   set seed 1234
   scalar m = 2            # Dimension of cov matrix
   matrix covm = I(m)      # Simple case: identity matrix
   covm[2,1] = 0				# determine contemporaneous correlation
   covm[1,2] = covm[2,1]
   matrix errmn = mnormal(T,cols(covm)) * cholesky(covm)'

   series e1 = errmn[,1]
   series e2 = errmn[,2]
   scalar delta = 0  #.01	 				# drift param. for x-process
   series x = cum(delta + e1)				# DGP for x, simple RW(+drift)
   scalar a = 0			               # intercept value
   scalar phi = 0.9		          # speed of adjustment param. rho=phi-1
   scalar c0 = 0.5			            # contemporaneous effect of x
   scalar c1 = -0.45	               	# 1st lag of x
   # DGP: ARDL in levels
   series y = 0			               # initial value
   series y = a + phi * y(-1) + c0 * x + c1 * x(-1) + e2

   printf &quot;\n************************************\n&quot;
   printf &quot;Error-correction param. = %.3f\n&quot;, (phi-1)
   printf &quot;LR-beta multiplier = %.3f\n&quot;, (c0+c1)/(phi-1)
   printf &quot;************************************\n&quot;

   smpl index &gt;= T/2 --restrict		# allow for burn-in phase
   store &quot;@dotdir/dtmp.gdt&quot;
   open &quot;@dotdir/dtmp.gdt&quot; -q
   gnuplot x y --with-lines --time-series --output=display \
      { set title 'Simulated time-series'; }

   # Run the bootstrap version based on the ARDL
   list xlist = x
   list rxlist = const time
   scalar pq = 1			  # lag length in levels
   scalar condARDL = TRUE
   # 0=unrestr. intercept, 1=rest. intercept, 2=restr. const+trend
   scalar case = 1
   scalar btype = 4
   scalar bootrep = 1999
   scalar failstop = 0.15
   scalar which = 1		   # 0=BDM, 1=PSS test
   scalar verbose = TRUE

   # Setup the model
   bundle B = setMod(which, case, y, xlist, rxlist, \
   pq, condARDL, btype, bootrep, failstop, verbose)

   # Run bootstrap cointegration test
   runCoint(&amp;B)

   # Johansen test for comparison
   list endo = y x
   coint2 pq y x #--rc
endif
</sample-script>
</gretl-function-package>
</gretl-functions>
