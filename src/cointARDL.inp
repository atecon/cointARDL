include string_utils.gfn
# TODO: Make use of new logging functionalities

function void Info (const string s)
    printf "\nInfo: %s\n", s
end function

function void Warning (const string s)
    printf "\nWarning: %s\n", s
end function

function void Error (const string s)
    printf "\nError: %s\n", s
end function


function bundle test_to_int_mapping (void)
    /*  Key-value mapping */
    return _(bdm = 1, pss = 2)
end function


function bundle case_to_int_mapping (void)
    /*  Key-value mapping */
    return _(urc = 1, rc = 2, rct = 3)
end function


function bundle bootstrap_to_int_mapping (void)
    /*  Key-value mapping */
    return _(parametric = 1,\
                non_parametric = 2,\
                wild_uniform = 3,\
                wild_rademacher = 4)
end function


function bundle default_values (void)
    /* Set default values here. */

    bundle B

    string B.name_test = "pss"           # früher 'whichTest'
    string B.name_case = "rc"            # früher 'case'
    scalar B.max_lag_length = 4              # früher 'pq'
    scalar B.conditional_model = TRUE    # früher 'condARDL'
    string B.name_bootstrap = "non_parametric" # früher 'btype'
    scalar B.bootstrap_replications = 199    # früher 'bootrep'
    scalar B.stopping_fraction = 0.2         # früher 'failstop'
    scalar B.verbose = FALSE             # früher 'verb'
    string B.estimator = "ols"
    scalar B.stability_threshold = -0.00001

    return B
end function


function scalar check_case_and_trend (const bundle self)
    /* Check that  */

    if self.name_case == "rct" && self.with_linear_trend == FALSE
        Error("The case 'rct' requires that a time trend is included to the list of restricted exogenous.")
        return TRUE
    endif

    return FALSE
end function


function scalar check_case_and_intercept (const bundle self)
    /* Check that case */

    if (self.name_case == "rc" || self.name_case == "rct") && self.with_intercept == FALSE
        Error("The cases 'rc' or 'rct' require that an intercept is included to the list of restricted exogenous.")
        return TRUE
    endif

    return FALSE
end function


function scalar set_min_lag_length (const bundle self)
    /* Compute minimum lag-length. */

    return self.conditional_model == TRUE ? 0 : 1
end function


function string set_verbosity_string (const bundle self)
    /* Compile "quiet" string. */

    return (self.verbose == TRUE) ? "--quiet" : ""
end function


function scalar includes_intercept (const list L)
    /* Check whether L includes 'const' series. */
    return (inlist(L, "const") > 0) ? TRUE : FALSE
end function

function scalar includes_linear_trend (const list L)
    /* Check whether L includes 'time' series. */
    return (inlist(L, "time") > 0) ? TRUE : FALSE
end function


function bundle setModel (const series y "Endogenous",
                           const list xlist "List of exogenous regressors",
                           const list rxlist[null] "List of exogenous",
                           const bundle Parameters[null])
    bundle self
    self.error = FALSE
    if exists(Parameters)
        bundle self = Parameters
    endif
    self = self + default_values()

    scalar self.with_intercept = includes_intercept(rxlist)
    scalar self.with_linear_trend = includes_linear_trend(rxlist)

    self.error += check_case_and_trend(self)
    self.error += check_case_and_intercept(self)
    print self
    if self.error > 0
        return self
    endif

    self.min_lag_length = set_min_lag_length(self)
    self.verbose_string = set_verbosity_string(self)

    series self.y = y
    list self.xlist = xlist
    list self.rxlist = rxlist

    return self
end function


function bundle estimate_model (const bundle self)
    /* Run actual model estimation. Return model bundle. */

    bundle B

    series y = self.y
    list xlist = self.xlist
    list rxlist = self.rxlist
    string verbose_string = self.verbose_string

    if self.estimator == "ols"
        catch ols y y(-1 to -self.max_lag_length) xlist(self.min_lag_length to -self.max_lag_length) rxlist @verbose_string
    else
        Error(sprintf("Estimator '%s' is not supported.", self.estimator))
        return B
    endif

    if $error
        Error("Model estimation failed.")
        return B
    endif

    B = $model
    B.stability_threshold = self.stability_threshold
    if self.estimator == "ols"
        B.uhat = $uhat
    endif


    # Test the null of no long-run relationship
    if self.name_test == "pss"


    elif self.name_test == "bdm"

    endif



    return B
end function


function matrix strstarts_array (const strings sarr, const string starts_with)
    /* Generalization of the string_utils' function strstarts() for arrays. Returns a boolean mask vector for strings that start with 'starts-with'. */

    if nelem(sarr) == 0
        Warning("String array is empty.")
        return {0}
    endif

    matrix mask = mshape(NA, nelem(sarr), 1)
    loop foreach i sarr
        mask[i] = strstarts(sarr[i], starts_with)
    endloop

    return mask
end function


function scalar model_is_stable (const bundle Model)
    /* Check for dynamic stability. */

    # Search for <nameEndogenous_*> e.g. y_1, y_2 etc.
    string starts_with = sprintf("%s_", Model.depvar)
    matrix ar_coeff = get_vector_values_by_name(Model.coeff,\
                                                Model.parnames,
                                                starts_with)

    if (sum(ar_coeff) - 1) > Model.stability_threshold
        Error("The specified model is dynamically unstable.")
        return FALSE
    else
        return TRUE
    endif
end function


function matrix get_vector_values_by_name (matrix coeff "Column vector",
                                           const strings names "Names of 'coeff' entries",
                                           const string starts_with "Search for 'names' that start with it")
    /* Retrieve from 'coeff' the vector of coefficients whose i-th 'names' entry starts with 'starts_with'. */

    coeff = vec(coeff)
    errorif(nelem(names) != nelem(coeff), "Dimension mismatch.")

    matrix mask = strstarts_array(names, starts_with)
    coeff_selected = selifr(coeff, mask)

    return (nelem(coeff_selected) == 0) ? {0} : coeff_selected
end function


/*
function scalar WaldTest(const matrix coeff,
                         const matrix vcv,
                         scalar a, scalar b)
     R = zeros(2, rows(coeff))
     R[1, a] = 1
     R[2, b] = 1
     outside = R*coeff
     inside = qform(R, vcv)
     return qform(outside', inv(inside))
end function
*/


function bundle r_and_q_wald_bdm (const bundle Model)
    /* Prepare R matrix and q vector for BDM-based Wald test. */

    matrix Rmat = zeros((1+case), nall)
    if case == 0
        matrix qvec = {1}
    elif case == 1
        Rmat[1,1] = 1           # restrict const
        matrix qvec = zeros(1,1) | {1}
    elif case == 2
        Rmat[1,1] = 1           # restrict const, unrestri. trend
        Rmat[2,2] = 1           # restrict trend
        matrix qvec = zeros(2,1) | {1}
    endif
    Rmat[(1+case), b.ay:b.ey] = 1      # restrict AR coefficients

    return _(Rmat, qvec)
end function


function matrix prepare_Rq (const bundle Model)
    /* Preparation for R matrix and q vector for linear Wald test. */

    # BDM test
    if Model.name_test == "bdm"
        bundle Rb = r_and_q_wald_bdm(Model)
    elif Model.name_test == "pss"
        bundle Rb = r_and_q_wald_pss(Model)
    endif


    else # PSS test
        if b.case==0
            matrix Rmat = zeros(1+b.nx,b.nall)  # unrestr. const.
            matrix qvec = {1} | zeros(b.nx,1)
        elif b.case==1
            matrix Rmat = zeros(2+b.nx,b.nall)  # restr. const
            Rmat[1,1] = 1
            matrix qvec = zeros(1,1) | {1} | zeros(b.nx,1)
        elif b.case==2
            matrix Rmat = zeros(3+b.nx,b.nall)  # restr. const + time
            Rmat[1,1] = 1
            Rmat[2,2] = 1
            matrix qvec = zeros(2,1) | {1} | zeros(b.nx,1)
        endif
        Rmat[(1+b.case), b.ay:b.ey]=1           # for rho
        scalar ax = b.ey+1
        scalar ex = ax+(b.condARDL + b.pq)-1
        loop i=(2+b.case)..(1+b.case+b.nx) -q
            Rmat[i,ax:ex] = 1        # Sum coefficients up
            ax = ex+1
            ex = ax+(b.condARDL + b.pq)-1
        endloop
    endif
    b.qvec = qvec
    b.Rmat = Rmat
end function






function scalar estimateModel (bundle *self "Bundel from setModel()")
    /* Estimate model and compute cointegration results.
    Return TRUE in case of an error, otherwise FALSE. */

    Model = estimate_model(self)
    if nelem(Model) == 0
        sels.error = TRUE   # FIXME: Return self and check for error in calling function
        return TRUE
    endif

    scalar is_stable = model_is_stable(Model)
    if !is_stable
        sels.error = TRUE
        return TRUE
    endif

    *** mit prepare_Rq() weitermachen

    return FALSE
end function









