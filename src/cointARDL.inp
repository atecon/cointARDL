function bundle Rq_BDM (const bundle b)
    /* Set of restriction matrices for BDM based cointegration test. */

    bundle Set
    matrix Set.Rmat = zeros((1 + b.case), b.nall)

    pos_const = instrings(b.names_exogenous, "const")
    pos_time = instrings(b.names_exogenous, "time")

    if b.case == 0
        matrix Set.qvec = {1}

    elif b.case == 1
        Set.Rmat[pos_const, pos_const] = 1
        matrix Set.qvec = zeros(1, 1) | {1}

    elif b.case == 2
        Set.Rmat[pos_const, pos_const] = 1
        Set.Rmat[pos_time, pos_time] = 1
        matrix Set.qvec = zeros(2, 1) | {1}
    endif

    # restrict AR coefficients
    Set.Rmat[(1 + b.case), b.init_pos_arcoeff:b.last_pos_arcoeff] = 1

    return Set
end function


function bundle Rq_PSS (const bundle b)
    /* Set of restriction matrices for PSS based cointegration test. */

    bundle Set
    matrix Set.Rmat = zeros((1 + b.case), b.nall)

    pos_const = instrings(b.names_exogenous, "const")
    pos_time = instrings(b.names_exogenous, "time")

    if b.case == 0
        matrix Set.Rmat = zeros((1 + b.nx), b.nall) # unrestr. const.
        matrix Set.qvec = {1} | zeros(b.nx, 1)

    elif b.case == 1
        matrix Set.Rmat = zeros((2 + b.nx), b.nall) # restr. const
        Set.Rmat[pos_const, pos_const] = 1
        matrix Set.qvec = zeros(1, 1) | {1} | zeros(b.nx, 1)

    elif b.case == 2
        matrix Set.Rmat = zeros((3 + b.nx), b.nall) # restr. const + time
        Set.Rmat[pos_const, pos_const] = 1
        Set.Rmat[pos_time, pos_time] = 1
        matrix Set.qvec = zeros(2, 1) | {1} | zeros(b.nx, 1)
    endif

    # restrict AR coefficients
    Set.Rmat[(1 + b.case), b.init_pos_arcoeff:b.last_pos_arcoeff] = 1

    scalar ax = b.last_pos_arcoeff + 1
    scalar ex = ax + (b.condARDL + b.pq) - 1

    loop i=(2 + b.case)..(1 + b.case + b.nx) -q
        Set.Rmat[i,ax:ex] = 1        # Sum coefficients up
        ax = ex + 1
        ex = ax + (b.condARDL + b.pq) - 1
    endloop

    return Set
end function


function void prepRq (bundle *b)
    /* Wrapper for compiling test-specific matrices for linear restrictions. */

    if b.whichTest == 0
        b = b + Rq_BDM(b)
    elif b.whichTest == 1
        b = b + Rq_PSS(b)
    else
        funcerr "Unknown ID for cointegration test passed. Abort."
    endif
end function


function void printTest (bundle *b)
    /* */

    printf "\n*****************************************************\n"
    if b.whichTest==0
        printf "*** BDM bootstrap t-Test based on ARDL(%d,%d) model ***\n", b.pq, b.pq
    else
        printf "*** PSS bootstrap F-Test based on ARDL(%d,%d) model ***\n", b.pq, b.pq
    endif
    printf "*****************************************************\n"

    printf "Restriction case: "
    if b.case == 0
        printf "unrestricted constant\n"
    elif b.case == 1
        printf "restricted constant\n"
    elif b.case == 2
        printf "restricted constant and restricted trend\n"
    endif

    printf "Bootstrap type: "
    if b.btype == 0
        string btype = "parametric"
    elif b.btype == 1
        string btype = "non-parametric"
    elif b.btype == 2
        string btype = "wild (uniform)"
    elif b.btype == 3
        string btype = "wild (Rademacher)"
    elif b.btype == 4
        string btype = "block-bootstrap"
    endif

    printf "Bootstrap replications: %d\n", b.bootrep
    printf "\nTest statistics = %.3f\n", b.teststat
    printf "\nCritical values:\n       1pct.  \t 5pct.  \t 10pct.\n"
    printf "%12.3f\n", b.crit'
    printf "Bootstrap p-value = %.3f\n", b.pvboot
    printf "Percentage of failed iterations = %.2f\n",\
        (100 * b.failed / b.bootrep)
    printf "******************************************************\n"
end function


function void bootTest (bundle *b)
    /* Bootstrap-bases cointegration test. */

    matrix Rmat = b.Rmat
    matrix qvec = b.qvec
    series endogenous = b.my
    list xlist = b.mx
    list rxlist = b.mrx
    list lDET = b.md
    string quiet_str = b.optsil
    lags endogenous xlist
    list Z = lDET xlist(b.pqmin to -b.pq) rxlist
    matrix Xbeta = b.Zcoef
    matrix matstat = mshape(NA, b.bootrep, 1)
    scalar nloop=1
    scalar failed = 0
    scalar failstop = 0.35
    scalar b.error = FALSE
    scalar b.failed = 0
    scalar btype = b.btype

    loop while nloop <= b.bootrep
        series e = drawE(b)

        # Simulate the null model (no long-run relationship)
        series y_b = varsimA(endogenous, b.rARcoef, Z, Xbeta, e, b.pq)
        lags y_b 1

        # Estimate the alt model based on the the null model DGP
        catch ols y_b lDET y_b(-1 to -b.pq) xlist(b.pqmin to -b.pq) \
            rxlist --quiet
        scalar err = $error

        if err || nelem($xlist) != cols(Rmat) || \
            !is_stable_model($coeff[b.init_pos_arcoeff:b.last_pos_arcoeff])
            b.failed++
        endif

        if (b.failed / b.bootrep >= b.failstop)
            printf "\nError: Simulated too many unstable models. Abort.\n"
            flush
            b.error = TRUE
            break
        endif

        if !err
            # Run the restriction of the estimated alt model based on null model dgp
            restrict --silent	 # H0: SUM(a_j)-1=0 --> in ECM: rho=0
                R = Rmat
                q = qvec
            end restrict

            matstat[nloop] = $test
            nloop++
        endif
    endloop

    if b.error == FALSE
        b.matstat = matstat
    endif

    # Clean up the bundle
    delete b.ex
    delete b.nrx
    delete b.mx
    delete b.nx
    delete b.Rmat
    delete b.Zcoef
    delete b.qvec
    delete b.init_pos_arcoeff
    delete b.nall
    delete b.ax
    delete b.md
    delete b.rARcoef
    delete b.last_pos_arcoeff
    delete b.muhat
    delete b.mrx
end function


function bundle setMod (int whichTest[0:1:] "Test type" {"BDM", "PSS"},
                        int case[0:2:1] "Case" {"Unrestr. intercept", "restr. interc.", "restr. interc.+trend"},
                        const series endogenous "Endogenous",
                        const list xlist "Exogenous regressors",
                        list rxlist[null] "Restricted exogenous; no lags added",
                        int pq[1::4] "Lag length in levels",
                        bool condARDL[1] "Estimate conditional model",
                        int btype[0:4:1] "Bootstrap type" {"parametric", "non-parametric", "wild uniform", "wild Rademacher", "block-bootstrap"},
                        int bootrep[99::999],
                        scalar failstop[0.01:0.9:0.2] "Fraction of failed bootstrap iterations before full stop",
                        bool verb[1] "Print details")
    /* Prepare everything for estimation. */

    pkg query ADMBP --quiet
    min_version_ADMBP = 1.0
    errorif($result.version < min_version_ADMBP,\
        sprintf("At least version %g of the 'ADMBP' package must be installed.",\
            min_version_ADMBP))

    bundle b
    scalar b.error = FALSE
    scalar b.addDET = 0

    if !exists(rxlist)
        list rxlist = null
    endif

    # Intercept and trend are ommitted from rxlist and handeled separately later
    # by runCoint().
    if inlist(rxlist, "const")
        scalar b.addDET = xmax(1, b.addDET)
        rxlist -= const
    endif

    if case == 2
        scalar b.addDET = 2
        if !inlist(rxlist, "time")
            print "Info: Added linear trend to list of restricted series."
        else
            rxlist -= time
        endif
    endif

    scalar nobs = $nobs
    list L = endogenous xlist rxlist
    smpl L --no-missing
    errorif($nobs < nobs, "Some of your series has missing values. Abort.")

    matrix b.my = {endogenous}
    matrix b.mx = xlist
    matrix b.mrx = rxlist
    string b.name_endogenous = argname(endogenous)
    strings b.names_xlist = varnames(xlist)
    strings b.rnames_xlist = varnames(rxlist)
    b.nx = nelem(xlist)
    b.nrx = nelem(rxlist)
    b.pq = pq
    b.condARDL = condARDL
    b.pqmin = (b.condARDL == TRUE) ? 0 : -1
    b.whichTest = whichTest
    b.case = case
    b.btype = btype
    b.bootrep = bootrep
    b.failstop = failstop
    string b.optsil = (verb==1) ? "" : "--quiet"

    return b
end function


function void runCoint (bundle *b)
    /* Run actual cointegration test.
    Return: FALSE if not error occurs, otherwise TRUE. */

    errorif(b.error == TRUE, "Check setMod() again as some error occurred")

    series endogenous = b.my
    list xlist = b.mx
    list rxlist = b.mrx
    lags endogenous xlist
    string quiet = b.optsil
    list lDET = null
    matrix quantile_values = {0.99, 0.95, 0.9}
    strings row_labels = defarray("99pct.", "95pct.", "90pct.")
    matrix b.crit = mshape(NA, nelem(quantile_values), 1)
    matrix b.pvboot = mshape(NA, nelem(quantile_values), 1)
    matrix b.test = mshape(NA, nelem(quantile_values), 1)

    # TODO: In principle we could provide an user-defined matrix before calling runARDL()
    # This could be helpful if want to provide a gappy coefficient matrix with some
    # zeros or fixed parameters (for whatever reasons).
    if b.addDET == 1
        list lDET += const
    elif b.addDET == 2
        genr time
        list lDET += const
        lDET += time
    endif

    matrix b.md = lDET
    ols endogenous lDET endogenous(-1 to -b.pq) xlist(b.pqmin to -b.pq) \
        rxlist --quiet

    scalar b.init_pos_arcoeff = b.addDET + 1
    scalar b.last_pos_arcoeff = b.init_pos_arcoeff + b.pq - 1
    scalar isstable = is_stable_model($coeff[b.init_pos_arcoeff:b.last_pos_arcoeff])

    if !isstable
        print "Error: Model is dynamically unstable. Abort."
        flush
        b.error = TRUE
        matrix b.crit = NA
        matrix b.pvboot = NA
        matrix b.test = NA
    endif

    b.muhat = {$uhat}			# those are used for resampling
    scalar b.nx = nelem(xlist)
    scalar b.nall = nelem($coeff)
    strings b.names_exogenous = varnames($xlist)

    # Test the null of no long-run relationship
    prepRq(&b)
    matrix Rmat = b.Rmat
    matrix qvec = b.qvec

    catch restrict --full --silent # H0: SUM(a_j)-1=0 --> in ECM: rho=0
        R = Rmat
        q = qvec
    end restrict

    scalar err = $error
    if err
        printf "%s. Abort.\n", errmsg(err)
        b.error = TRUE
    endif

    if !b.error
        b.teststat = $test				# F-Test stats.

        # Information of the null model for bootstrap
        b.rARcoef = $coeff[b.init_pos_arcoeff:b.last_pos_arcoeff]
        scalar b.ax = b.last_pos_arcoeff + 1
        if b.addDET > 0
            # Deterministics + DL coeff needed for ysim()
            b.Zcoef = $coeff[1:(b.init_pos_arcoeff-1)] | $coeff[b.ax:]
        else
            b.Zcoef = $coeff[b.ax:]
        endif

        scalar b.ex = b.ax + b.nx * (b.condARDL + b.pq) - 1

        bootTest(&b)

        if !b.error
            matstat = b.matstat
            b.crit =  quantile(b.matstat, quantile_values)
            rnameset(b.crit, row_labels)

            # Compute scalar bootstrap p-value
            b.pvboot = sum( abs(b.matstat) .>= abs(b.teststat) ) / b.bootrep
            if !nelem(b.optsil)
                printTest(&b)
            endif
        endif
    endif
end function
