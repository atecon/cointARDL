set verbose off
clear

function void Info (const string s)
    printf "\nInfo: %s\n", s
end function

function void Warning (const string s)
    printf "\nWarning: %s\n", s
end function

function void Error (const string s)
    printf "\nError: %s\n", s
end function


function bundle test_to_int_mapping (void)
    /*  Key-value mapping */
    return _(bdm = 1, pss = 2)
end function


function bundle case_to_int_mapping (void)
    /*  Key-value mapping */
    return _(urc = 1, rc = 2, rct = 3)
end function


function bundle bootstrap_to_int_mapping (void)
    /*  Key-value mapping */
    return _(parametric = 1,\
                non_parametric = 2,\
                wild_uniform = 3,\
                wild_rademacher = 4)
end function


function bundle default_values (void)
    /* Set default values here. */

    bundle B

    string B.name_test = "pss"           # früher 'whichTest'
    string B.name_case = "rc"            # früher 'case'
    scalar B.max_lag_length = 4              # früher 'pq'
    scalar B.conditional_model = TRUE    # früher 'condARDL'
    string B.name_bootstrap = "non_parametric" # früher 'btype'
    scalar B.bootstrap_replications = 199    # früher 'bootrep'
    scalar B.stopping_fraction = 0.2         # früher 'failstop'
    scalar B.verbose = FALSE             # früher 'verb'
    scalar B.with_intercept = TRUE      # früher 'addDET'

    return B
end function


function scalar case_and_trend_are_ok (const bundle self, const list rxlist)
    /* Check that  */

    if self.name_case == "rct" && inlist(rxlist, "time") == FALSE
        Error("The case 'rct' requires that a time trend is included to the list of restricted exogenous.")
        return FALSE
    endif

    return TRUE
end function

function scalar case_and_intercept_are_ok (const bundle self, const list rxlist)
    /* Check that case */

    if (self.name_case == "rc" || self.name_case == "rct") && inlist(rxlist, "const") == FALSE
        Error("The cases 'rc' or 'rct' require that an intercept is included to the list of restricted exogenous.")
        return FALSE
    endif

    return TRUE
end function


function scalar set_min_lag_length (const bundle self)
    /* Compute minimum lag-length. */

    return self.conditional_model == TRUE ? 0 : 1
end function


function string set_verbosity_string (const bundle self)
    /* Compile "quiet" string. */

    return (self.verbose == TRUE) ? "--quiet" : ""
end function

function bundle set_model (const series y "Endogenous",
                           const list xlist "List of exogenous regressors",
                           const list rxlist[null] "List of exogenous",
                           const bundle Parameters[null])

    bundle self
    # TODO: in eigene Funktion
    if exists(Parameters)
        bundle self = Parameters
    endif
    self = self + default_values()
 
    error_1 = case_and_trend_are_ok(self, rxlist)
    error_2 = case_and_intercept_are_ok(self, rxlist)
    if error_1 + error_2 > 0
        self.error = TRUE
        return self
    endif

    self.min_lag_length = set_min_lag_length(self)
    self.verbose_string = set_verbosity_string(self)
    #*** HIER WEITERMACHEN


    
    return self
end function