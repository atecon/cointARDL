set verbose off
clear

set assert stop
# include assertion.gfn

include "./src/cointARDL.inp" --force

function void test_test_to_int_mapping (void)
    print "Start testing test_to_int_mapping()"

    # Given
    bundle expected = _(bdm = 1, pss = 2)

    # When
    bundle actual = test_to_int_mapping()

    # Then
    assert(nelem(actual) == nelem(expected))
    loop foreach i actual
        assert(actual["$i"] == expected["$i"])
    endloop
end function
test_test_to_int_mapping()


function void test_case_to_int_mapping (void)
    print "Start testing case_to_int_mapping()"

    # Given
    bundle expected = _(urc = 1, rc = 2, rct = 3)

    # When
    bundle actual = case_to_int_mapping()

    # Then
    assert(nelem(actual) == nelem(expected))
    loop foreach i actual
        assert(actual["$i"] == expected["$i"])
    endloop
end function
test_case_to_int_mapping()


function void test_bootstrap_to_int_mapping (void)
    print "Start testing bootstrap_to_int_mapping()"

    # Given
    bundle expected = _(parametric = 1,\
                        non_parametric = 2,\
                        wild_uniform = 3,\
                        wild_rademacher = 4)

    # When
    bundle actual = bootstrap_to_int_mapping()

    # Then
    assert(nelem(actual) == nelem(expected))
    loop foreach i actual
        assert(actual["$i"] == expected["$i"])
    endloop
end function
test_bootstrap_to_int_mapping()


function void test_default_values (void)
    print "Start testing default_values()."

    # Given
    strings expected_keys = defarray("name_test",\
                                "name_case",
                                "max_lag_length",\
                                "conditional_model",\
                                "name_bootstrap",\
                                "bootstrap_replications",\
                                "stopping_fraction",\
                                "verbose",\
                                "with_intercept")

    # When
    bundle actual = default_values()

    # Then
    assert(nelem(actual) == nelem(expected_keys))
    loop foreach i expected_keys
        assert(inbundle(actual, expected_keys[i]) != 0)
    endloop
end function
test_default_values()


open denmark.gdt -q -p
list L = dataset
bundles Parameters = null
Parameters = Parameters + _(name_case = "rct", incl_time_to_xlist = FALSE, expected = FALSE)
Parameters = Parameters + _(name_case = "rct", incl_time_to_xlist = TRUE, expected = TRUE)
Parameters = Parameters + _(name_case = "foo", incl_time_to_xlist = FALSE, expected = TRUE)
Parameters = Parameters + _(name_case = "foo", incl_time_to_xlist = TRUE, expected = TRUE)
function void test_check_case_and_trend (const list x, const bundles P)
    print "Start testing check_case_and_trend()."

    loop foreach i P
        # Given
        list L = x
        if P[i].incl_time_to_xlist == TRUE
            L += time
        endif

        # When
        actual = check_case_and_trend(P[i], L)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_check_case_and_trend(L, Parameters)



open denmark.gdt -q -p
list L = dataset
bundles Parameters = null
Parameters = Parameters + _(name_case = "rct", incl_const_to_xlist = FALSE, expected = FALSE)
Parameters = Parameters + _(name_case = "rct", incl_const_to_xlist = TRUE, expected = TRUE)
Parameters = Parameters + _(name_case = "rc", incl_const_to_xlist = FALSE, expected = FALSE)
Parameters = Parameters + _(name_case = "rc", incl_const_to_xlist = TRUE, expected = TRUE)
Parameters = Parameters + _(name_case = "foo", incl_const_to_xlist = FALSE, expected = TRUE)
Parameters = Parameters + _(name_case = "foo", incl_const_to_xlist = TRUE, expected = TRUE)
function void test_check_case_and_const (const list x, const bundles P)
    print "Start testing check_case_and_intercept()."

    loop foreach i P
        # Given
        list L = x
        if P[i].incl_const_to_xlist == TRUE
            L += const
        endif

        # When
        actual = check_case_and_intercept(P[i], L)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_check_case_and_const(L, Parameters)


bundles Parameters = null
Parameters = Parameters + _(conditional_model = TRUE, expected = 0)
Parameters = Parameters + _(conditional_model = FALSE, expected = 1)
function void test_set_min_lag_length (const bundles P)
    print "Start testing set_min_lag_length()."

    loop foreach i P
        # Given + When
        scalar actual = set_min_lag_length(P[i])

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_set_min_lag_length(Parameters)


bundles Parameters = null
Parameters = Parameters + _(verbose = TRUE, expected = "--quiet")
Parameters = Parameters + _(verbose = FALSE, expected = "")
function void test_set_verbosity_string (const bundles P)
    print "Start testing set_verbosity_string()."

    loop foreach i P
        # Given + When
        string actual = set_verbosity_string(P[i])

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_set_verbosity_string(Parameters)





# Integration tests
# =================




print "Finished all tests succesfully."
quit


