set verbose off
clear

set assert stop
# include assertion.gfn

include "./src/cointARDL.inp" --force

function void test_test_to_int_mapping (void)
    print "Start testing test_to_int_mapping()"

    # Given
    bundle expected = _(bdm = 1, pss = 2)

    # When
    bundle actual = test_to_int_mapping()

    # Then
    assert(nelem(actual) == nelem(expected))
    loop foreach i actual
        assert(actual["$i"] == expected["$i"])
    endloop
end function
test_test_to_int_mapping()


function void test_case_to_int_mapping (void)
    print "Start testing case_to_int_mapping()"

    # Given
    bundle expected = _(urc = 1, rc = 2, rct = 3)

    # When
    bundle actual = case_to_int_mapping()

    # Then
    assert(nelem(actual) == nelem(expected))
    loop foreach i actual
        assert(actual["$i"] == expected["$i"])
    endloop
end function
test_case_to_int_mapping()


function void test_bootstrap_to_int_mapping (void)
    print "Start testing bootstrap_to_int_mapping()"

    # Given
    bundle expected = _(parametric = 1,\
                        non_parametric = 2,\
                        wild_uniform = 3,\
                        wild_rademacher = 4)

    # When
    bundle actual = bootstrap_to_int_mapping()

    # Then
    assert(nelem(actual) == nelem(expected))
    loop foreach i actual
        assert(actual["$i"] == expected["$i"])
    endloop
end function
test_bootstrap_to_int_mapping()


function void test_default_values (void)
    print "Start testing default_values()."

    # Given
    strings expected_keys = defarray("name_test",\
                                "name_case",
                                "max_lag_length",\
                                "conditional_model",\
                                "name_bootstrap",\
                                "bootstrap_replications",\
                                "stopping_fraction",\
                                "verbose",\
                                "estimator",
                                "stability_threshold")

    # When
    bundle actual = default_values()

    # Then
    assert(nelem(actual) == nelem(expected_keys))
    loop foreach i expected_keys
        assert(inbundle(actual, expected_keys[i]) != 0)
    endloop
end function
test_default_values()


open denmark.gdt -q -p
list L = dataset
bundles Parameters = null
Parameters = Parameters + _(incl_time_to_xlist = FALSE, expected = FALSE)
Parameters = Parameters + _(incl_time_to_xlist = TRUE, expected = TRUE)
function void test_includes_linear_trend (const list x, const bundles P)
    print "Start testing includes_linear_trend()."

    loop foreach i P
        # Given
        list L = x
        if P[i].incl_time_to_xlist == TRUE
            L += time
        endif

        # When
        actual = includes_linear_trend(L)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_includes_linear_trend(L, Parameters)


open denmark.gdt -q -p
list L = dataset
bundles Parameters = null
Parameters = Parameters + _(incl_intercept = FALSE, expected = FALSE)
Parameters = Parameters + _(incl_intercept = TRUE, expected = TRUE)
function void test_includes_intercept (const list x, const bundles P)
    print "Start testing includes_intercept()."

    loop foreach i P
        # Given
        list L = x
        if P[i].incl_intercept == TRUE
            L += const
        endif

        # When
        actual = includes_intercept(L)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_includes_intercept(L, Parameters)


bundles Parameters = null
Parameters = Parameters + _(name_case = "rct", with_linear_trend = FALSE, expected = TRUE)
Parameters = Parameters + _(name_case = "rct", with_linear_trend = TRUE, expected = FALSE)
Parameters = Parameters + _(name_case = "foo", with_linear_trend = FALSE, expected = FALSE)
Parameters = Parameters + _(name_case = "foo", with_linear_trend = TRUE, expected = FALSE)
function void test_check_case_and_trend (const bundles P)
    print "Start testing check_case_and_trend()."

    loop foreach i P
        # Given + When
        actual = check_case_and_trend(P[i])

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_check_case_and_trend(Parameters)


bundles Parameters = null
Parameters = Parameters + _(name_case = "rct", with_intercept = FALSE, expected = TRUE)
Parameters = Parameters + _(name_case = "rct", with_intercept = TRUE, expected = FALSE)
Parameters = Parameters + _(name_case = "rc", with_intercept = FALSE, expected = TRUE)
Parameters = Parameters + _(name_case = "rc", with_intercept = TRUE, expected = FALSE)
Parameters = Parameters + _(name_case = "foo", with_intercept = FALSE, expected = FALSE)
Parameters = Parameters + _(name_case = "foo", with_intercept = TRUE, expected = FALSE)
function void test_check_case_and_intercept (const bundles P)
    print "Start testing check_case_and_intercept()."

    loop foreach i P
        # Given + When
        actual = check_case_and_intercept(P[i])

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_check_case_and_intercept(Parameters)


bundles Parameters = null
Parameters = Parameters + _(conditional_model = TRUE, expected = 0)
Parameters = Parameters + _(conditional_model = FALSE, expected = 1)
function void test_set_min_lag_length (const bundles P)
    print "Start testing set_min_lag_length()."

    loop foreach i P
        # Given + When
        scalar actual = set_min_lag_length(P[i])

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_set_min_lag_length(Parameters)


bundles Parameters = null
Parameters = Parameters + _(verbose = TRUE, expected = "--quiet")
Parameters = Parameters + _(verbose = FALSE, expected = "")
function void test_set_verbosity_string (const bundles P)
    print "Start testing set_verbosity_string()."

    loop foreach i P
        # Given + When
        string actual = set_verbosity_string(P[i])

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_set_verbosity_string(Parameters)


bundles Parameters = null
Parameters = Parameters + _(searched = defarray("const", "y_1", "x", "y_2"),\
                            starts_with = "y_", expected = {0, 1, 0, 1})
Parameters = Parameters + _(searched = defarray(""),\
                            starts_with = "y_", expected = {0})
Parameters = Parameters + _(searched = defarray("a", "b", "c", "d"),\
                            starts_with = "y_", expected = {0, 0, 0, 0})
Parameters = Parameters + _(searched = defarray("Ay_1", "Xy_1", "y_2", "y"),\
                            starts_with = "y_", expected = {0, 0, 1, 0})
function void test_strstarts_array (const bundles P)
    print "Start testing strstarts_array()."

    loop foreach i P
        # Given + When
        matrix actual = strstarts_array(P[i].searched, P[i].starts_with)
        matrix expected = P[i].expected'

        # Then
        assert(actual == expected)
    endloop
end function
test_strstarts_array(Parameters)


bundles Parameters = null
Parameters = Parameters + _(starts_with = "y_",\
                            parnames = defarray("const", "y_1", "x", "y_2"),\
                            coeff = {4, 0.5, 1, 0.2}', expected = {0.5, 0.2}')
Parameters = Parameters + _(starts_with = "y_",\
                            parnames = defarray("const", "x", "z"),\
                            coeff = {4, 0.5, 1}', expected = {0}')
function void test_get_vector_values_by_name (const bundles P)
    print "Start testing get_vector_values_by_name()"

    loop foreach i P
        # Given + When
        matrix actual = get_vector_values_by_name(P[i].coeff,\
                                        P[i].parnames, P[i].starts_with)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_get_vector_values_by_name(Parameters)


function void test_model_is_stable ()
    print "Start testing model_is_stable()"

    # Given

    # When

    # Then
end function
test_model_is_stable()


function void test_initialize_Rmat (void)
    print "Start testing initialize_Rmat()."

    # Given
    given


    # When
    when


    # Then
    then
end function
test_initialize_Rmat()


function void test_estimate_model (void)
    print "Start testing estimate_model()"

    # Given

    # When

    # Then
end function
test_estimate_model()



# Integration tests
# =================




print "Finished all tests succesfully."
quit


